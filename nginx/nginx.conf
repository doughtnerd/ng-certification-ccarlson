daemon off;
error_log /dev/stdout;
load_module modules/ngx_http_perl_module.so;

env NGINX_API_PROXY_PASS;
env NGINX_USE_HTTPS='true';

# auto detects a good number of processes to run
worker_processes auto;

events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 8000;
    # Tells the worker to accept multiple connections at a time
    multi_accept on;
}

http {
     # Sets the log formats for general requests
    log_format main escape=json '{'
        '"nginx_version": "$nginx_version",'
        '"timestamp": $msec,'
        '"request_id": "$request_id",'
        '"remote_addr": "$remote_addr",'
        '"request_method": "$request_method",'
        '"request_uri": "$request_uri",'
        '"request_time": $request_time,'
        '"status": $status,'
        '"body_bytes_sent": $body_bytes_sent,'
        '"http_referer": "$http_referer",'
        '"http_user_agent": "$http_user_agent",'
        '"connections_active": $connections_active,'
        '"connections_reading": $connections_reading,'
        '"connections_writing": $connections_writing,'
        '"connections_waiting": $connections_waiting'
    '}';

    # Sets the log formats for any proxied requests like an api backend
    log_format upstreamlog escape=json '{'
        '"nginx_version": "$nginx_version",'
        '"timestamp": $msec,'
        '"request_id": "$request_id",'
        '"remote_addr": "$remote_addr",'
        '"request_method": "$request_method",'
        '"request_uri": "$request_uri",'
        '"request_time": $request_time,'
        '"status": $status,'
        '"body_bytes_sent": $body_bytes_sent,'
        '"http_referer": "$http_referer",'
        '"http_user_agent": "$http_user_agent",'
        '"connections_active": $connections_active,'
        '"connections_reading": $connections_reading,'
        '"connections_writing": $connections_writing,'
        '"connections_waiting": $connections_waiting'
        '"upstream_addr": "$upstream_addr",'
        '"upstream_status": $upstream_status,'
        '"upstream_response_time": $upstream_response_time,'
        '"upstream_bytes_received": $upstream_bytes_received'
    '}';

    # Disables sending the nginx version in response headers
    server_tokens off;

    # Gzip
    gzip            on;
    gzip_min_length 500;
    gzip_comp_level 5;
    gzip_proxied    any;
    gzip_types      application/javascript text/css;
    gzip_vary       on;
    gzip_static     on;

    # set env variables through perl
    perl_set $nginx_api_proxy_pass 'sub { return $ENV{"NGINX_API_PROXY_PASS"}; }';
    perl_set $nginx_use_https 'sub { return $ENV{"NGINX_USE_HTTPS"}; }';

    server {
        listen $PORT;
        server_name    _;
        resolver 8.8.8.8;

        # what types to include
        include       /etc/nginx/mime.types;
        # what is the default one
        default_type  application/octet-stream;

         # writes the logs the stdout (or the console)
        access_log /dev/stdout main;

        # where the root here
        root /usr/share/nginx/html;

        # what file to server as index
        index index.html index.htm;

        # set a var to see if the request is http and https is required
        set $scheme_and_use_https "${http_x_forwarded_proto}+${nginx_use_https}";

        location / {
           if ($scheme_and_use_https = 'http+true') {
                rewrite ^ https://$host$request_uri? permanent;
            }
            try_files $uri $uri/ /index.html;
        }

        location /api/ {
            if ($scheme_and_use_https = 'http+true') {
                rewrite ^ https://$host$request_uri? permanent;
            }
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' '*';
                add_header 'Access-Control-Allow-Headers' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            access_log /dev/stdout upstreamlog;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_pass ${nginx_api_proxy_pass};
        }

        error_page 404 /404.html;
            location = /404.html {
        }

        error_page 503 /503.html;
            location = /503.html {
        }

         # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
          expires 1M;
          access_log off;
          add_header Cache-Control public;
        }

        # Javascript and CSS files
        location ~* \.(?:css|js)$ {
            try_files $uri =404;
            expires 1M;
            access_log off;
            add_header Cache-Control public;
        }

        # manifest.json
        location ~* manifest.json {
            try_files $uri =404;
            access_log off;
        }

        # attempt at fix to stop index.html caching
        location ~ \.html$ {
            add_header Cache-Control "private, no-cache, no-store, must-revalidate";
            add_header Expires "Sat, 01 Jan 2000 00:00:00 GMT";
            add_header Pragma no-cache;
        }

        # Any route containing a file extension (e.g. /main.js)
        location ~ ^.+\..+$ {
            try_files $uri =404;
        }
    }
}